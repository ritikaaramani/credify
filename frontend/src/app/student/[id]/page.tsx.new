'use client';

import { useState, useEffect, use, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';

interface Credential {
  id: string;
  skills_acquired: string;
  score: number;
  rank: string;
  credential_name: string;
  certificate_url: string;
}

interface StudentProfile {
  id: string;
  name: string;
  email: string;
  phone: string;
  created_at: string;
  role: string;
  credentials: Credential[];
}

export default function StudentPage({ params }: { params: Promise<{ id: string }> }) {
  const [student, setStudent] = useState<StudentProfile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const { id: studentId } = use(params);

  const fetchStudentProfile = useCallback(async () => {
    try {
      // Fetch user details
      const { data: profile, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', studentId)
        .eq('role', 'student')
        .single();

      if (userError) throw userError;

      if (!profile) {
        throw new Error('Student not found');
      }

      // Fetch credentials for the specific student
      const { data: credentials, error: credError } = await supabase
        .from('credentials')
        .select('*')
        .eq('student_id', profile.id);

      if (credError) throw credError;

      setStudent({
        id: profile.id,
        name: profile.name,
        email: profile.email,
        phone: profile.phone,
        created_at: profile.created_at,
        role: profile.role,
        credentials: credentials || []
      });
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  }, [studentId]);

  useEffect(() => {
    fetchStudentProfile();
  }, [fetchStudentProfile]);

  if (loading) {
    return (
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white shadow rounded-lg p-6">
          <div className="animate-pulse">
            <div className="h-4 bg-gray-200 rounded w-1/4 mb-4"></div>
            <div className="space-y-3">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !student) {
    return (
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <button
          onClick={() => router.back()}
          className="mb-6 flex items-center text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5 mr-2" />
          Back to Dashboard
        </button>
        <div className="bg-red-50 border border-red-200 rounded-lg p-6">
          <h2 className="text-red-800 text-lg font-medium">Error</h2>
          <p className="mt-2 text-red-700">{error || 'Student not found'}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <button
        onClick={() => router.back()}
        className="mb-6 flex items-center text-gray-600 hover:text-gray-900"
      >
        <ArrowLeftIcon className="h-5 w-5 mr-2" />
        Back to Dashboard
      </button>

      <div className="bg-white shadow rounded-lg overflow-hidden">
        <div className="p-6">
          <h1 className="text-2xl font-bold text-gray-900">{student.name}</h1>
          <div className="mt-4 space-y-4">
            <div>
              <p className="text-sm font-medium text-gray-500">Email</p>
              <p className="mt-1 text-gray-900">{student.email}</p>
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500">Phone</p>
              <p className="mt-1 text-gray-900">{student.phone || 'Not provided'}</p>
            </div>
            <div>
              <p className="text-sm font-medium text-gray-500">Joined</p>
              <p className="mt-1 text-gray-900">
                {new Date(student.created_at).toLocaleDateString('en-US', {
                  month: 'long',
                  day: 'numeric',
                  year: 'numeric'
                })}
              </p>
            </div>
          </div>
        </div>

        <div className="border-t border-gray-200 px-6 py-5">
          <h2 className="text-xl font-semibold text-gray-900">Credentials</h2>
          {student.credentials.length > 0 ? (
            <div className="mt-4 space-y-4">
              {student.credentials.map((credential) => (
                <div
                  key={credential.id}
                  className="bg-gray-50 rounded-lg p-4 border border-gray-200"
                >
                  <h3 className="font-medium text-gray-900">
                    {credential.credential_name}
                  </h3>
                  <div className="mt-2 space-y-2">
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">Skills: </span>
                      {credential.skills_acquired}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">Score: </span>
                      {credential.score}
                    </p>
                    <p className="text-sm text-gray-600">
                      <span className="font-medium">Rank: </span>
                      {credential.rank}
                    </p>
                    {credential.certificate_url && (
                      <a
                        href={credential.certificate_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center text-sm text-blue-600 hover:text-blue-500"
                      >
                        View Certificate
                        <svg
                          className="ml-1 h-4 w-4"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth="2"
                            d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                          />
                        </svg>
                      </a>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="mt-4 text-gray-600">No credentials found.</p>
          )}
        </div>
      </div>
    </div>
  );
}