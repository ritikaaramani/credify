Database Design

API ACCESS
Project URL - https://pjqxgyfixpxouvykccuo.supabase.co
API KEY - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBqcXhneWZpeHB4b3V2eWtjY3VvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAxODQxNjMsImV4cCI6MjA3NTc2MDE2M30.YcQxZzLQviuiaJsxNIF5k73N-3z_zsjyujCETcS-ySM




---

## üß± 1Ô∏è‚É£ DATABASE DESIGN SUMMARY  (Supabase / PostgreSQL)

Your database is **relational** and hosted on **Supabase** (PostgreSQL + Auth + Storage).
It‚Äôs designed around three key actors: **Students**, **Institutes**, and **Employers**.

### üîπ Core Tables

| Table                      | Purpose                                                     | Key Columns                                                                                                         | Relationships                                                                      |

| **users**                  | All platform users (students, institutes, employers, admin) | `id (uuid PK)`, `role`, `name`, `email`                                                                             | Each `student_profile`, `institute_profile`, `employer_verification` links to this |
| **student_profiles**       | Student info & academic details                             | `id (uuid, FK ‚Üí users.id)`, `student_id`, `institution_id`, `wallet_address`                                        | Belongs to one `user`, linked to `credentials`                                     |
| **institute_profiles**     | Institute info                                              | `id (uuid, FK ‚Üí users.id)`, `institute_name`, `accreditation_id`, `logo_url`                                        | Has many `students` and `templates`                                                |
| **credentials**            | Each certificate issued                                     | `id`, `student_id (FK)`, `institute_id (FK)`, `credential_name`, `issue_date`, `certificate_url`, `blockchain_hash` | Links blockchain + Supabase Storage                                                |
| **certificate_templates**  | Design templates for certificates                           | `id`, `institute_id (FK)`, `template_name`, `template_file_url`, `fields_json`                                      | Used by `credentials` during generation                                            |
| **employer_verifications** | Record of employer checks                                   | `id`, `employer_id (FK)`, `student_id (FK)`, `result`                                                               | Employers verify credentials                                                       |
| **nsqf_mapping**           | NSQF reference levels                                       | `level`, `description`, `next_level`                                                                                | Used for stackable credentials                                                     |

### üîê Row-Level Security (RLS)

* Students ‚Üí can only view/update their own profile & credentials.
* Institutes ‚Üí can upload & view credentials they issued.
* Employers ‚Üí can only verify.
* Admins ‚Üí full access.

---

## üß© 2Ô∏è‚É£ BLOCKCHAIN INTEGRATION (Verification Layer)

The blockchain ensures **authenticity** of certificates.

### ‚öôÔ∏è Flow

1. **Institute issues a credential**

   * Collects data: student info + course + template
   * Generates a **metadata JSON**, e.g.

     ```json
     {
       "student_id": "abc123",
       "credential_name": "Python Fundamentals",
       "issued_on": "2025-10-10",
       "institute": "RVCE"
     }
     ```
2. **Generate Hash**

   * `const hash = SHA256(JSON.stringify(metadata))`
3. **Record on Blockchain**

   * Store `hash` (and minimal metadata) in your **JS blockchain** node or smart contract.
   * Return `transaction_id` or `block_id`.
4. **Store in Database**

   * Update `credentials.blockchain_hash = transaction_id`
   * Save generated certificate PDF to Supabase Storage and link its URL.

### üß† Verification

When an **employer scans a QR code** or checks a certificate:

1. Fetch certificate hash from Supabase.
2. Query blockchain ‚Üí verify the hash exists (authentic certificate).
3. Display verification result (‚úÖ Verified / ‚ùå Tampered).

---

## üß∞ 3Ô∏è‚É£ DATABASE UPDATING (For Team Collaboration)

There are **3 main ways** your teammates can add or edit data safely:

### üß† Option 1 ‚Äî **Supabase Table Editor**

* Go to **Table Editor** ‚Üí select table (e.g., `credentials`, `student_profiles`).
* Add records manually.
  ‚úÖ Simple, GUI-based (good for non-developers).

### üíª Option 2 ‚Äî **SQL Scripts or Supabase CLI**

* Store your SQL schema (`schema.sql`) in GitHub.
* Anyone can run:

  ```bash
  npx supabase db push
  ```

  ‚Üí updates schema and tables for everyone.
  ‚úÖ Perfect for developers collaborating on structure.

### ‚öôÔ∏è Option 3 ‚Äî **Programmatic via API / JS SDK**

Use Supabase JS client (with API key) to add data dynamically:

```js
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

await supabase.from('credentials').insert([
  {
    student_id: 'uuid-of-student',
    institute_id: 'uuid-of-institute',
    credential_name: 'AI Fundamentals',
    issue_date: '2025-10-11',
    certificate_url: 'https://.../certificates/123.pdf',
    blockchain_hash: 'block_tx_abc123'
  }
])
```

‚úÖ Ideal for backend automation after certificate generation.

---

## üë• 4Ô∏è‚É£ GIVING TEAMMATES DATABASE ACCESS

In **Supabase ‚Üí Project Settings ‚Üí API & Roles:**

* Create **Organization Members** and assign roles:

  * **Owner** ‚Äì full access.
  * **Developer** ‚Äì SQL, Auth, and Storage access.
  * **Editor** ‚Äì can modify data but not structure.
* Alternatively, generate **service_role** key (backend only, never public).

Each teammate can:

* Log in to the dashboard with their account.
* Use their own **Supabase credentials** to query or update data.

---

## üîó 5Ô∏è‚É£ SYSTEM FLOW WORK (End-to-End Architecture)

### **A. Institute Portal (Issuer)**

1. Institute logs in ‚Üí Authenticated via Supabase Auth.
2. Uploads student credentials in bulk (CSV or form).
3. Selects certificate template ‚Üí triggers certificate generator.
4. Certificate generated ‚Üí hash recorded on blockchain ‚Üí file uploaded to Supabase Storage.
5. Database updated (`credentials` table).

---

### **B. Student Mobile App**

1. Student logs in (email/password ‚Üí Supabase Auth).
2. App fetches their credentials:

   ```js
   supabase.from('credentials').select('*').eq('student_id', user.id)
   ```
3. Displays credentials list + download links.
4. Each certificate has QR ‚Üí opens verification URL.

---

### **C. Employer Portal**

1. Employer logs in.
2. Searches candidate ‚Üí retrieves credentials from Supabase.
3. Portal checks blockchain hash ‚Üí validates authenticity.
4. Saves a record in `employer_verifications`.

---

### üß≠ Flow Diagram (Textual)

```
[Institute Website]
   ‚Üì Upload data
[Supabase DB] ‚Üê‚Üí [Blockchain (JS Network)]
   ‚Üë                ‚Üë
[Student App]       [Employer Portal]
   ‚Üì                ‚Üì
 View & Download    Verify Hash
 Certificates        Authenticity
```

---

## üß© 6Ô∏è‚É£ Summary ‚Äî How Everything Connects

| Component             | Platform               | Function                                               |
| --------------------- | ---------------------- | ------------------------------------------------------ |
| **Database**          | Supabase (Postgres)    | Stores users, credentials, templates                   |
| **Storage**           | Supabase Storage       | Saves PDFs, templates, photos                          |
| **Auth**              | Supabase Auth          | Secure login for students, institutes, employers       |
| **Blockchain Layer**  | Custom JS blockchain   | Verifies authenticity of certificates                  |
| **Frontend (Mobile)** | Kotlin                 | Student credential viewer                              |
| **Frontend (Web)**    | React / Next.js        | Institute & employer portals                           |
| **Backend Script**    | Node.js                | Generates certificates, uploads to storage, updates DB |

---

